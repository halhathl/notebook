{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":7455749,"sourceType":"datasetVersion","datasetId":4339849},{"sourceId":7561066,"sourceType":"datasetVersion","datasetId":4402709}],"dockerImageVersionId":30635,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/hatimmoe/fork-of-riyadh-real-estate-apt-analysis?scriptVersionId=175052437\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"Statiscal data analysis on Apartment sales transaction for Riyadh city.. years recorded 2022-2023. the focus is to analyze price, area, unit-size and the correlation between these variables ","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19"}},{"cell_type":"code","source":"import pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport plotly.express as px\nimport matplotlib.dates\n%matplotlib inline\nimport plotly.express as ex\nfrom plotly.subplots import make_subplots\nfrom IPython.display import display, HTML\ndf= pd.read_csv('/kaggle/input/riyadh-apartment-sales-2022-23/Book-RE.csv')\nfrom sklearn.preprocessing import LabelEncoder\n!pip install arabic-reshaper\n\n\nfrom bidi.algorithm import get_display","metadata":{"execution":{"iopub.status.busy":"2024-02-28T10:34:53.337605Z","iopub.execute_input":"2024-02-28T10:34:53.338599Z","iopub.status.idle":"2024-02-28T10:35:08.151536Z","shell.execute_reply.started":"2024-02-28T10:34:53.338559Z","shell.execute_reply":"2024-02-28T10:35:08.150097Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.head(1800)","metadata":{"execution":{"iopub.status.busy":"2024-02-28T10:35:08.153976Z","iopub.execute_input":"2024-02-28T10:35:08.15438Z","iopub.status.idle":"2024-02-28T10:35:08.198415Z","shell.execute_reply.started":"2024-02-28T10:35:08.154345Z","shell.execute_reply":"2024-02-28T10:35:08.197321Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#lets take a look at the data shape ( number of columns and rows)\ndf.shape","metadata":{"execution":{"iopub.status.busy":"2024-02-28T10:35:08.20014Z","iopub.execute_input":"2024-02-28T10:35:08.200802Z","iopub.status.idle":"2024-02-28T10:35:08.208465Z","shell.execute_reply.started":"2024-02-28T10:35:08.200759Z","shell.execute_reply":"2024-02-28T10:35:08.206932Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-02-28T10:35:08.211552Z","iopub.execute_input":"2024-02-28T10:35:08.212272Z","iopub.status.idle":"2024-02-28T10:35:08.2221Z","shell.execute_reply.started":"2024-02-28T10:35:08.212227Z","shell.execute_reply":"2024-02-28T10:35:08.221136Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_clean = df.copy()  # Create a copy of the original DataFrame\ndf_clean['Price'] = df['Price'].str.replace(r'[\\ SAR,]', '', regex=True)\ndf_clean['Price'] = df_clean['Price'].astype(float).round().astype(int)\ndf_clean.head(5)","metadata":{"execution":{"iopub.status.busy":"2024-02-28T10:35:08.223793Z","iopub.execute_input":"2024-02-28T10:35:08.224544Z","iopub.status.idle":"2024-02-28T10:35:08.253539Z","shell.execute_reply.started":"2024-02-28T10:35:08.224503Z","shell.execute_reply":"2024-02-28T10:35:08.252806Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_clean.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-02-28T10:35:08.254848Z","iopub.execute_input":"2024-02-28T10:35:08.25538Z","iopub.status.idle":"2024-02-28T10:35:08.262537Z","shell.execute_reply.started":"2024-02-28T10:35:08.25535Z","shell.execute_reply":"2024-02-28T10:35:08.261454Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n# Assuming df is your DataFrame and 'Area' is the column with spaces\ndf['Area'] = df['Area'].str.strip()\n\n\n##pd.set_option('display.float_format', '{:.2f}'.format)","metadata":{"execution":{"iopub.status.busy":"2024-02-28T10:35:08.263962Z","iopub.execute_input":"2024-02-28T10:35:08.264332Z","iopub.status.idle":"2024-02-28T10:35:08.274214Z","shell.execute_reply.started":"2024-02-28T10:35:08.26428Z","shell.execute_reply":"2024-02-28T10:35:08.273116Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_clean.describe().T","metadata":{"execution":{"iopub.status.busy":"2024-02-28T10:35:08.276805Z","iopub.execute_input":"2024-02-28T10:35:08.277201Z","iopub.status.idle":"2024-02-28T10:35:08.315182Z","shell.execute_reply.started":"2024-02-28T10:35:08.277169Z","shell.execute_reply":"2024-02-28T10:35:08.314089Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n\nfrom matplotlib.ticker import FuncFormatter, MultipleLocator\nfrom scipy.stats import norm\n\n# Assuming you have a DataFrame named df with columns 'Price' and 'Size'\n\n# Filter out price values greater than 3 million\nfiltered_prices = df_clean[df_clean['Price'] <= 3e6]['Price']\n\n# Set the figure size and style\nplt.figure(figsize=(10, 6))\nsns.set_style(\"whitegrid\")\n\n# Plot the histogram for Price with a filled kernel density estimate\nsns.histplot(filtered_prices, kde=True, color='skyblue', fill=True)\n\n# Calculate mean and standard deviation for Price\nmu, std = norm.fit(filtered_prices)\n\n# Plot the normal distribution curve for Price\nxmin, xmax = plt.xlim()\nx = np.linspace(-1.0e6, 2.5e6, 100)  # Set x-axis limits from -2.5 million to 3 million\np = norm.pdf(x, mu, std)\nplt.plot(x, p, 'k', linewidth=2)\n\n# Customize tick formatter to display normal numbers\nformatter = FuncFormatter(lambda x, _: '{:,.0f}'.format(x))\nplt.gca().xaxis.set_major_formatter(formatter)\n\n# Add more x-axis ticks\nplt.gca().xaxis.set_major_locator(MultipleLocator(500000))  # Set tick marks every 500,000\n\n# Add titles and labels\nplt.title('Normal Dist Riyadh Apartmnet prices 22-23', fontsize=16)\nplt.xlabel('Price', fontsize=14)\nplt.ylabel('Density', fontsize=14)\n\n# Add legend and annotations\nplt.legend(['Normal Distribution', 'Price Distribution'], loc='best', fontsize=12)\nplt.grid(True, linestyle='--', alpha=0.5)\n\n# Add a vertical line at the mean\nplt.axvline(x=mu, color='r', linestyle='--', linewidth=2)\n\n# Add text annotation for the mean\nplt.text(mu + 100000, 0.0000015, f'Mean: SAR{mu:,.0f}', color='r', fontsize=12)\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-02-28T10:35:08.317837Z","iopub.execute_input":"2024-02-28T10:35:08.31819Z","iopub.status.idle":"2024-02-28T10:35:08.950409Z","shell.execute_reply.started":"2024-02-28T10:35:08.318159Z","shell.execute_reply":"2024-02-28T10:35:08.949151Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Assuming you have a DataFrame named df_clean with a column 'Size'\n\n# Set the figure size and style\nplt.figure(figsize=(10, 6))\nsns.set_style(\"whitegrid\")\n\n# Plot the histogram for Size with a filled kernel density estimate\nsns.histplot(df_clean['Size'], kde=True, color='lightgreen', fill=True)\nplt.xlim(0, 400)  # Set the x-axis range for Size\n\n# Calculate mean and standard deviation for Size\nmu, std = norm.fit(df_clean['Size'])\n\n# Plot the normal distribution curve for Size\nx = np.linspace(0, 350, 100)  # Set x-axis limits from 0 to 350\np = norm.pdf(x, mu, std)\nplt.plot(x, p, 'k', linewidth=2)\n\n# Customize tick formatter to display normal numbers\nformatter = FuncFormatter(lambda x, _: '{:,.0f}'.format(x))\nplt.gca().xaxis.set_major_formatter(formatter)\n\n# Add titles and labels\nplt.title('Size Distribution with Normal Distribution Curve', fontsize=16)\nplt.xlabel('Size', fontsize=14)\nplt.ylabel('Density', fontsize=14)\n\n# Add legend\nplt.legend(['Normal Distribution', 'Size Distribution'], loc='best', fontsize=12)\n\n# Add a vertical line at the mean\nplt.axvline(x=mu, color='r', linestyle='--', linewidth=2)\n\n# Add text annotation for the mean\nplt.text(mu + 10, 0.01, f'Mean: {mu:.2f}', color='r', fontsize=12)\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-02-28T10:35:08.953781Z","iopub.execute_input":"2024-02-28T10:35:08.954252Z","iopub.status.idle":"2024-02-28T10:35:11.802805Z","shell.execute_reply.started":"2024-02-28T10:35:08.954217Z","shell.execute_reply":"2024-02-28T10:35:11.801712Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Get the count of each unique value in the 'neighborhood' column\nneighborhood_counts = df_clean['Area'].value_counts()\n\n# Filter and display only the values with a count of 50 or more\nneighborhood_counts_filtered = neighborhood_counts[neighborhood_counts >= 50]\n\nprint(\"Values with a count of 50 or more in the 'Area' column:\")\nprint(neighborhood_counts_filtered)","metadata":{"execution":{"iopub.status.busy":"2024-02-28T10:35:11.804071Z","iopub.execute_input":"2024-02-28T10:35:11.804474Z","iopub.status.idle":"2024-02-28T10:35:11.81576Z","shell.execute_reply.started":"2024-02-28T10:35:11.804444Z","shell.execute_reply":"2024-02-28T10:35:11.81451Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n# Remove trailing spaces from the 'Area' column\ndf_clean['Area'] = df_clean['Area'].str.strip()\n\n# Get the count of each unique value in the 'Area' column\nneighborhood_counts = df_clean['Area'].value_counts()\n\n# Filter and display only the values with a count of 50 or more\nneighborhood_counts_filtered = neighborhood_counts[neighborhood_counts >= 50]\n\n# Sort the filtered counts in descending order\nneighborhood_counts_filtered = neighborhood_counts_filtered.sort_values(ascending=False)\n\n# Filter the DataFrame to include only rows where the 'Area' column is in neighborhood_counts_filtered\nfiltered_df = df_clean[df_clean['Area'].isin(neighborhood_counts_filtered.index)]\n\n# Calculate the average price for each area\naverage_prices = filtered_df.groupby('Area')['Price'].mean()\n\n# Print the average prices\nprint(\"Average price for each area with a count of 50 or more:\")\nprint(average_prices)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-02-28T10:35:11.817124Z","iopub.execute_input":"2024-02-28T10:35:11.817555Z","iopub.status.idle":"2024-02-28T10:35:11.841528Z","shell.execute_reply.started":"2024-02-28T10:35:11.817524Z","shell.execute_reply":"2024-02-28T10:35:11.840569Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Find the maximum value in the 'price' column\nmax_price = df_clean['Price'].max()\n\nprint(\"Maximum Price:\", max_price)","metadata":{"execution":{"iopub.status.busy":"2024-02-28T10:35:11.852917Z","iopub.execute_input":"2024-02-28T10:35:11.853258Z","iopub.status.idle":"2024-02-28T10:35:11.866288Z","shell.execute_reply.started":"2024-02-28T10:35:11.853228Z","shell.execute_reply":"2024-02-28T10:35:11.864955Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"max_price_rows = df_clean[df_clean['Price'] == max_price]\n\nprint(\"Row(s) with Maximum Price:\")\nprint(max_price_rows)","metadata":{"execution":{"iopub.status.busy":"2024-02-28T10:35:11.867732Z","iopub.execute_input":"2024-02-28T10:35:11.868753Z","iopub.status.idle":"2024-02-28T10:35:11.881619Z","shell.execute_reply.started":"2024-02-28T10:35:11.868717Z","shell.execute_reply":"2024-02-28T10:35:11.880458Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Get the count of each unique value in the 'neighborhood' column\nneighborhood_counts = df_clean['Area'].value_counts()\n\n# Filter and display only the values with a count of 50 or more\nneighborhood_counts_filtered = neighborhood_counts[neighborhood_counts >= 50]\n\nprint(\"Values with a count of 50 or more in the 'Area' column:\")\nprint(neighborhood_counts_filtered)","metadata":{"execution":{"iopub.status.busy":"2024-02-28T10:35:11.882862Z","iopub.execute_input":"2024-02-28T10:35:11.883191Z","iopub.status.idle":"2024-02-28T10:35:11.891568Z","shell.execute_reply.started":"2024-02-28T10:35:11.883164Z","shell.execute_reply":"2024-02-28T10:35:11.890486Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Group the data by 'Area' and calculate the mean price for each group\nmean_price_by_area = df_clean.groupby('Area')['Price'].mean()\n\n# Get the count of each unique value in the 'Area' column\nneighborhood_counts = df_clean['Area'].value_counts()\n\n# Filter and display only the values with a count of 50 or more\nneighborhood_counts_filtered = neighborhood_counts[neighborhood_counts >= 50]\n\n# Display the filtered counts along with the mean price for each area\nprint(\"Values with a count of 50 or more in the 'Area' column:\")\nprint(neighborhood_counts_filtered)\nprint(\"\\nMean price for each area:\")\nprint(mean_price_by_area[neighborhood_counts_filtered.index])","metadata":{"execution":{"iopub.status.busy":"2024-02-28T10:35:11.892629Z","iopub.execute_input":"2024-02-28T10:35:11.892912Z","iopub.status.idle":"2024-02-28T10:35:11.908915Z","shell.execute_reply.started":"2024-02-28T10:35:11.892888Z","shell.execute_reply":"2024-02-28T10:35:11.907805Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import folium\n\n# Create a base map\nriyadh_map = folium.Map(location=[24.7136, 46.6753], zoom_start=11)\n\n# Area coordinates\narea_coordinates = {\n    \"الملقا\": [24.80000, 46.62389],\n    \"الياسمين\": [24.821944, 46.641944],\n    \"لبن\": [24.631667, 46.530000],\n    \"حطين\": [24.762222, 46.600833],\n    \"النرجس\": [24.894444, 46.644167],\n    \"قرطبة\": [24.816111, 46.735556],\n    \"الدار البيضاء\": [24.565000, 46.792222],\n    \"العارض\": [24.898333, 46.602222],\n    \"بدر\": [24.527778, 46.730556],\n    \"المونسية\": [24.831389, 46.768056],\n    \"النخيل\": [24.749722, 46.646667],\n    \"الرمال\": [24.892778, 46.804167],\n    \"القدس\": [24.753611, 46.754167],\n    \"الحمراء\": [24.775556, 46.753611],\n    \"اشبيليا\": [24.789167, 46.786389],\n    \"الدريهمية\": [24.589722, 46.695833],\n    \"اليمامة\": [24.596111, 46.715833],\n    \"اليرموك\": [24.807500, 46.783056],\n    \"السويدى\": [24.590556, 46.679444],\n    \"طويق\": [24.587778, 46.560000],\n    \"العزيزية\": [24.585556, 46.773056],\n    \"الاندلس\": [24.743611, 46.788333],\n    \"الحزم\": [24.544000, 46.653611],\n    \"عرقه\": [24.689444, 46.583889],\n    \"الروضة\": [24.734722, 46.767778],\n    \"المربع\": [24.646111, 46.710000],\n    \"الملك سلمان\": [24.7402778, 46.7144444],\n    \"الشفاء\": [24.564444, 46.697778]\n}\n\n# Function to assign marker color based on mean price\ndef get_marker_color(mean_price):\n    if mean_price >= 3000000:\n        return 'red'\n    elif mean_price >= 2000000:\n        return 'orange'\n    elif mean_price >= 1000000:\n        return 'yellow'\n    else:\n        return 'green'\n\n# Add markers for areas with a count of 50 or more\nfor area, coordinates in area_coordinates.items():\n    # Get the mean price for the area\n    mean_price = mean_price_by_area.get(area, \"N/A\")\n    # Create a marker with the area name and mean price in SAR currency\n    popup_text = f\"{area}<br>Mean Price: {mean_price} SAR\"\n    marker_color = get_marker_color(mean_price)\n    folium.CircleMarker(location=coordinates, radius=5, color=marker_color, fill=True, fill_opacity=0.7, popup=popup_text).add_to(riyadh_map)\n\n# Display the map\nriyadh_map","metadata":{"execution":{"iopub.status.busy":"2024-02-28T10:42:48.838522Z","iopub.execute_input":"2024-02-28T10:42:48.838976Z","iopub.status.idle":"2024-02-28T10:42:48.90821Z","shell.execute_reply.started":"2024-02-28T10:42:48.83894Z","shell.execute_reply":"2024-02-28T10:42:48.907187Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import folium\nimport branca\nimport numpy as np\n\n# Define a color scale\ncolor_scale = branca.colormap.LinearColormap(colors=['green', 'yellow', 'orange', 'red'], vmin=df_clean['Price'].min(), vmax=df_clean['Price'].max())\n\n# Create a base map\nriyadh_map = folium.Map(location=[24.7136, 46.6753], zoom_start=11)\n\n# Function to assign marker color based on mean price\ndef get_marker_color(mean_price):\n    if mean_price >= 3000000:\n        return 'red'\n    elif mean_price >= 2000000:\n        return 'orange'\n    elif mean_price >= 1000000:\n        return 'yellow'\n    else:\n        return 'green'\n\n# Add markers for areas with a count of 50 or more\nfor area, coordinates in area_coordinates.items():\n    # Get the mean price for the area\n    mean_price = mean_price_by_area.get(area, \"N/A\")\n    # Create a marker with the area name and mean price in SAR currency\n    popup_text = f\"{area}<br>Mean Price: {mean_price} SAR\"\n    marker_color = get_marker_color(mean_price)\n    folium.CircleMarker(location=coordinates, radius=12, color=marker_color, fill=True, fill_opacity=0.7, popup=popup_text).add_to(riyadh_map)\n\n# Add color scale to the map\ncolor_scale.add_to(riyadh_map)\n\n# Display the map\nriyadh_map","metadata":{"execution":{"iopub.status.busy":"2024-02-28T10:40:44.938685Z","iopub.execute_input":"2024-02-28T10:40:44.939216Z","iopub.status.idle":"2024-02-28T10:40:45.020024Z","shell.execute_reply.started":"2024-02-28T10:40:44.939173Z","shell.execute_reply":"2024-02-28T10:40:45.019Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Lets try to identify outliers in the price variable and size \n","metadata":{}},{"cell_type":"code","source":"# Calculate Q1 and Q3\nQ1 = df_clean['Price'].quantile(0.25)\nQ3 = df_clean['Price'].quantile(0.75)\n\n# Calculate IQR\nIQR = Q3 - Q1\n\n# Define lower and upper bounds\nlower_bound = Q1 - 1.5 * IQR\nupper_bound = Q3 + 1.5 * IQR\n\n# Detect outliers\noutliers = df_clean[(df_clean['Price'] < lower_bound) | (df_clean['Price'] > upper_bound)]\n\n# Display outliers\nprint(\"Outliers:\")\nprint(outliers)","metadata":{"execution":{"iopub.status.busy":"2024-02-28T10:50:50.835895Z","iopub.execute_input":"2024-02-28T10:50:50.836352Z","iopub.status.idle":"2024-02-28T10:50:50.855608Z","shell.execute_reply.started":"2024-02-28T10:50:50.836316Z","shell.execute_reply":"2024-02-28T10:50:50.854495Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.ticker as ticker\n\n# Calculate mean and standard deviation\nmean_price = df_clean['Price'].mean()\nstd_price = df_clean['Price'].std()\n\n# Define the plot\nplt.figure(figsize=(10, 6))\n\n# Plot the mean as a horizontal line\nplt.axvline(x=mean_price, color='blue', linestyle='--', label='Mean Price')\n\n# Plot the data points\nplt.scatter(df_clean['Price'], np.random.normal(0, 0.1, len(df_clean)), color='black', alpha=0.5, label='Data Points')\n\n# Plot outliers\noutliers = df_clean[(df_clean['Price'] < lower_bound) | (df_clean['Price'] > upper_bound)]\nplt.scatter(outliers['Price'], np.random.normal(0, 0.1, len(outliers)), color='red', label='Outliers')\n\n# Set labels and title\nplt.xlabel('Price')\nplt.ylabel('Variation')\nplt.title('Variation Graph with Mean and Outliers')\n\n# Format tick labels to display in normal format\nplt.gca().xaxis.set_major_formatter(ticker.FuncFormatter(lambda x, _: '{:,.0f}'.format(x)))\n\n# Add legend\nplt.legend()\n\n# Show plot\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-02-28T10:56:08.977954Z","iopub.execute_input":"2024-02-28T10:56:08.978435Z","iopub.status.idle":"2024-02-28T10:56:09.46147Z","shell.execute_reply.started":"2024-02-28T10:56:08.978399Z","shell.execute_reply":"2024-02-28T10:56:09.460678Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport numpy as np\n\n# Calculate mean and standard deviation\nmean_price = df_clean['Price'].mean()\nstd_price = df_clean['Price'].std()\n\n# Define the plot\nplt.figure(figsize=(10, 6))\n\n# Plot the mean as a horizontal line\nplt.axvline(x=mean_price, color='blue', linestyle='--', label='Mean Price')\n\n# Plot the data points\nplt.scatter(df_clean['Price'], np.random.normal(0, 0.1, len(df_clean)), color='black', alpha=0.5, label='Data Points')\n\n# Plot outliers\noutliers = df_clean[(df_clean['Price'] < lower_bound) | (df_clean['Price'] > upper_bound)]\nplt.scatter(outliers['Price'], np.random.normal(0, 0.1, len(outliers)), color='red', label='Outliers')\n\n# Set labels and title\nplt.xlabel('Price')\nplt.ylabel('Variation')\nplt.title('Variation Graph with Mean and Outliers')\n\n# Customize x-axis ticks\ncustom_ticks = [-500000, 500000, 1000000, 2000000, 3000000, 4000000, 5000000, 6000000, 7000000, 8000000, 9000000, 10000000, 11000000, 12000000, 13000000, 14000000, 15000000, 16000000, 17000000]\ncustom_tick_labels = ['-500k', '500k', '1M', '2M', '3M', '4M', '5M', '6M', '7M', '8M', '9M', '10M', '11M', '12M', '13M', '14M', '15M', '16M', '17M']\nplt.xticks(custom_ticks, custom_tick_labels, rotation=45, ha='right')\n\n# Add legend\nplt.legend()\n\n# Show plot\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-02-28T11:02:41.21851Z","iopub.execute_input":"2024-02-28T11:02:41.218907Z","iopub.status.idle":"2024-02-28T11:02:41.820303Z","shell.execute_reply.started":"2024-02-28T11:02:41.218876Z","shell.execute_reply":"2024-02-28T11:02:41.8192Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.ticker import ScalarFormatter, StrMethodFormatter\n\n# Calculate mean and standard deviation\nmean_price = df_clean['Price'].mean()\nstd_price = df_clean['Price'].std()\n\n# Define the plot\nplt.figure(figsize=(10, 6))\n\n# Plot the mean as a horizontal line\nplt.axvline(x=mean_price, color='blue', linestyle='--', label='Mean Price')\n\n# Plot the data points\nplt.scatter(df_clean['Price'], np.random.normal(0, 0.1, len(df_clean)), color='black', alpha=0.5, label='Data Points')\n\n# Plot outliers\noutliers = df_clean[(df_clean['Price'] < lower_bound) | (df_clean['Price'] > upper_bound)]\nplt.scatter(outliers['Price'], np.random.normal(0, 0.1, len(outliers)), color='red', label='Outliers')\n\n# Set labels and title\nplt.xlabel('Price')\nplt.ylabel('Variation')\nplt.title('Variation Graph with Mean and Outliers for Price')\n\n# Set limits for x-axis to focus on the range of interest\nplt.xlim(100, 2500000)  # Adjust the range to focus on the desired price range\n\n# Use StrMethodFormatter to format tick labels without 'e' notation\nplt.gca().xaxis.set_major_formatter(StrMethodFormatter('{x:.0f}'))\n\n# Add legend\nplt.legend()\n\n# Show plot\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-02-28T11:25:45.79879Z","iopub.execute_input":"2024-02-28T11:25:45.799206Z","iopub.status.idle":"2024-02-28T11:25:46.294633Z","shell.execute_reply.started":"2024-02-28T11:25:45.799172Z","shell.execute_reply":"2024-02-28T11:25:46.293252Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Calculate mean and standard deviation\nmean_size = df_clean['Size'].mean()\nstd_size = df_clean['Size'].std()\n\n# Define the plot\nplt.figure(figsize=(10, 6))\n\n# Plot the mean as a horizontal line\nplt.axvline(x=mean_size, color='blue', linestyle='--', label='Mean Size')\n\n# Plot the data points\nplt.scatter(df_clean['Size'], np.random.normal(0, 0.1, len(df_clean)), color='black', alpha=0.5, label='Data Points')\n\n# Plot outliers\noutliers = df_clean[(df_clean['Size'] < lower_bound) | (df_clean['Size'] > upper_bound)]\nplt.scatter(outliers['Size'], np.random.normal(0, 0.1, len(outliers)), color='red', label='Outliers')\n\n# Set labels and title\nplt.xlabel('Size')\nplt.ylabel('Variation')\nplt.title('Variation Graph with Mean and Outliers for Size')\n\n# Add legend\nplt.legend()\n\n# Show plot\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-02-28T11:06:02.633479Z","iopub.execute_input":"2024-02-28T11:06:02.633879Z","iopub.status.idle":"2024-02-28T11:06:03.136608Z","shell.execute_reply.started":"2024-02-28T11:06:02.633851Z","shell.execute_reply":"2024-02-28T11:06:03.135379Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# dypes tells us the difference data ","metadata":{}},{"cell_type":"code","source":"\n# Calculate mean and standard deviation\nmean_size = df_clean['Size'].mean()\nstd_size = df_clean['Size'].std()\n\n# Define the plot\nplt.figure(figsize=(10, 6))\n\n# Plot the mean as a horizontal line\nplt.axvline(x=mean_size, color='blue', linestyle='--', label='Mean Size')\n\n# Plot the data points\nplt.scatter(df_clean['Size'], np.random.normal(0, 0.1, len(df_clean)), color='black', alpha=0.5, label='Data Points')\n\n# Plot outliers\noutliers = df_clean[(df_clean['Size'] < lower_bound) | (df_clean['Size'] > upper_bound)]\nplt.scatter(outliers['Size'], np.random.normal(0, 0.1, len(outliers)), color='red', label='Outliers')\n\n# Set labels and title\nplt.xlabel('Size')\nplt.ylabel('Variation')\nplt.title('Variation Graph with Mean and Outliers for Size')\n\n# Set limits for x-axis to focus on the range of interest\nplt.xlim(10, 500)\n\n# Add legend\nplt.legend()\n\n# Show plot\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-02-28T11:16:03.413951Z","iopub.execute_input":"2024-02-28T11:16:03.41442Z","iopub.status.idle":"2024-02-28T11:16:03.842197Z","shell.execute_reply.started":"2024-02-28T11:16:03.414385Z","shell.execute_reply":"2024-02-28T11:16:03.841088Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"df['Price'].mean","metadata":{"execution":{"iopub.status.busy":"2024-01-22T11:11:57.48236Z","iopub.execute_input":"2024-01-22T11:11:57.482733Z","iopub.status.idle":"2024-01-22T11:11:57.491456Z","shell.execute_reply.started":"2024-01-22T11:11:57.482696Z","shell.execute_reply":"2024-01-22T11:11:57.490364Z"}}},{"cell_type":"markdown","source":"For numeric data, the result’s index will include count, mean, std, min, max as well as lower, 50 and upper percentiles. By default the lower percentile is 25 and the upper percentile is 75. The 50 percentile is the same as the median.\n\nFor object data (e.g. strings or timestamps), the result’s index will include count, unique, top, and freq. The top is the most common value. The freq is the most common value’s frequency. Timestamps also include the first and last items.","metadata":{}}]}